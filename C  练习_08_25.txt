#define _CRT_SECURE_NO_WARNINGS 1
#include<iostream>

using namespace std;


//class Date
//{
//public:
//	void Init(int year, int month, int day)
//	{
//		_year = year;
//		_month = month;
//		_day = day;
//	}
//
//
//	void Print()
//	{
//		cout << _year << "-" << _month << "-" << _day << endl;
//	}
//private:
//	int _year;
//	int _month;
//	int _day;
//};
//
//
//int main()
//{
//	Date d1;
//	d1.Init(2022, 7, 5);
//	d1.Print();
//	Date d2;
//	d2.Init(2022, 7, 6);
//	d2.Print();
//	return 0;
//}
//

class Date
{
public:
	//Date(int year = 1, int month = 1, int day = 1)
	//{
	//	_year = year;
	//	_month = month;
	//	_day = day;
	//}

	void Print()
	{
		cout << _year << "-" << _month << "-" << _day << endl;
	}

private:
	int _year =1 ;   // 注意这里不是初始化，给缺省值
	int _month =1;
	int _day =1;
};

typedef int DataType;
class Stack
{
public:
	/*Stack(int capacity = 4)
	{
		cout << "Stack(int capacity = 4)" << endl;
		_array = (DataType*)malloc(sizeof(DataType) * capacity);
		if (NULL == _array)
		{
			perror("malloc申请空间失败!!!");
			return;
		}

		_size = 0;
		_capacity = capacity;
	}*/

	void Push(DataType data)
	{
		
		_array[_size] = data;
		_size++;
	}
private:
	DataType* _array;
	int _capacity;
	int _size;
};

// C++类型分类：
// 内置类型/基本类型：int/double/char/指针等等 
// 自定义类型：struct/class



class MyQueue
{
private:
	int _size;
	Stack _st1;
	Stack _st2;
};


int main()
{
	// 默认生成构造函数，a:内置类型成员不做处理 b：自定义类型成员回去调用他的默认构造函数
	// 设计是C++早期设计的一个缺陷，默认生成构造函数，本来应该内置类型也一并处理
	// C++11 打了一个补丁
	Date d;
	MyQueue q;
	Stack st;

	return 0;
}

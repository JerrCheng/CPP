#define _CRT_SECURE_NO_WARNINGS 1
#include<iostream>
#include<stdlib.h>
using namespace std;
void Test()
{
	int* p1 = (int*)malloc(sizeof(int));

	int* p2 = new int;
	// 申请5个int的数组
	int* p3 = new int[5];

	// 申请1个int对象，初始化为5
	int* p4 = new int(5);

	//C++11支持new[] 用{}初始化  C++98不支持
	int* p5 = new int[5]{ 1,2,3 };
		free(p1);

	delete p2;
	delete[] p3;
	delete p4;
	delete[] p5;

	// 针对内置类型，new/delete跟malloc/free没有本质的区别，只有用法的区别
	// new/delete 用法简化了
}


class A
{
public:
	A(int a = 0)
		: _a(a)
	{
		cout << "A():" << this << endl;
	}

	~A()
	{
		cout << "~A():" << this << endl;
	}

private:
	int _a;
};

int main()
{
	// 1、堆上申请空间
	A* p1 = (A*)malloc(sizeof(A));
	if (p1 == NULL)
	{
		perror("malloc fail");
		return 0;
	}

	// 1、释放空间
	free(p1);

	// 1、堆上申请空间  2、调用构造函数初始化
	//A* p2 = new A;
	A* p2 = new A(10);

	// 1、调用析构函数清理对象中资源 2、释放空间
	delete p2;

	cout << endl << endl;

	A* p3 = new A[2];
	delete[] p3;
 
	/* C++11支持
	 A* p3 = new A[2]{1,2};
	 A* p3 = new A[2]{ A(1), A(2) };*/

	// 结论：new/delete 是为自定义类型准备的。
	// 不仅在对申请出来，还会调用构造和析构初始化和清理

	return 0;
}
